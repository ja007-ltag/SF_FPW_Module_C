# C3.4. Работа с файлами
# Работа с файлами

# Python «из коробки» располагает достаточно широким набором инструментов для работы с файлами.
# Для того чтобы начать работать с файлом, надо его открыть с помощью команды специальной функции open.

# f = open('path/to/file', 'filemode', encoding='utf8')

# 'filemode':
# r — открыть на чтение (по умолчанию);
# w — перезаписать и открыть на запись (если файла нет, то он создастся);
# x — создать и открыть на запись (если уже есть — исключение);
# a — открыть на дозапись (указатель будет поставлен в конец);
# t — открыть в текстовом виде (по умолчанию);
# b — открыть в бинарном виде.

# Открытие на создание/перезапись файла
f = open("test.txt", "w", encoding="utf8")

# Запишем строку в файл
f.write("This is test string\n")
f.flush()  # Сохраняем предыдущую строку на диск

f.write("This is a new string\n")
# обязательно нужно закрыть файл иначе он будет заблокирован ОС
f.close()

# Теперь откроем файл на чтение
f = open("test.txt", "r", encoding="utf8")
print(f.read(10))  # считывает количество символов от текущей позиции
print(f.read())  # считывает количество символов от текущей позиции

f.close()

# Открываем на дозапись
f = open("test.txt", "a", encoding="utf8")

sequence = ["ocher string\n", "123\n", "test test\n"]
f.writelines(sequence)

f.close()

print("---------")

# Построчно прочитаем файл с помощью readlines
f = open("test.txt", "r", encoding="utf8")

print(f.readlines())

f.close()

print("---------")

# Метод f.readline() возвращает строку (символы от текущей позиции до символа переноса строки):
f = open("test.txt", "r", encoding="utf8")

print(f.readline(), end='')
print(f.read(4))
print(f.readline(), end='')

f.close()
